<?php

abstract class EV_DB extends EV_Object
{

	/**
	 * @var string. 
	 * The username to connecto the database with
	 */
	private $username;
	
	/**
	 * @var string. 
	 * The password of the user.
	 */
	private $password;
	
	/**
	 * @var string. 
	 * THe database hostname
	 */
	private $host;
	
	/**
	 * @var string. 
	 * The name of the database.
	 */
	private $name;
	
	/**
	 * @var resouce link. 
	 * Link to the current database connection, when the connection is open.
	 */
	private $db;
	
	/**
	 * @var int. 
	 * The last id generated by the query
	 */
	private $lastID;
	
	/**
	 * @var string.
	 * The error message returned from the mysql_error(). Returns empty if no error is returned.
	 */
	private $errorMessage;
	
	/**
	 * @var boolean.
	 * True if there was an error from the query, false if no error.
	 */
	private $queryError;
	
	/**
	 * Gets the last id generated by the database
	 * @return The last id generated by the database
	 */
	public function getLastID() {
		return $this->lastID;	
	}
	
	/**
	 * Returns the error message set.
	 */
	public function getErrorMessage() {
		return $this->errorMessage;
	}
	
	/**
	 * Sets the error message from the mysql query
	 */
	public function setErrorMessage() {
	
		// Set the queryError to true
		$this->queryError = true;
		
		// Set the error message property
		$this->errorMessage = sprintf("MySQL Error %s: %s", mysql_errno(), mysql_error());
		
	}
	
	/**
	 * Opens the connection to the database
	 */
	abstract protected function openConnection();
	
	/**
	 * Closes an existing connection to the database if its open
	 */
	abstract protected function closeConnection();
	
	/**
	 * @param $sql - The sql query to execute.
	 * @return Result Set. If the resultsOnly value is set to true, the array containing the results is returned, not the ResultSet object.
	 */
	abstract public function query($sql);
	
	/**
	 * @param $sql: The query to execute
	 * @return The value of the first column in the first row of the results. 
	 */
	abstract public function executeScalar($sql);
	
	/**
	 * @param $sql. The query to execute
	 * @return The number of rows affected by the query. Use Database->getLastID to get the ID of the last inserted row.
	 */
	abstract public function execute($sql);
	
	/**
	 * Selects multiple modles of a single model type from the database. 
	 * @param string $model  The name of the model.
	 * @param string $filter  The filter to apply to the model. This will be used as the WHERE clause.
	 * @param string $join  The statement to join additional tables.
	 * @param string $sort  How to order the results. This will be used as the ORDER BY clause.
	 * @param string $limit  Limit the result set.
	 * @return The ResultSet of the data. If no results are found, and empty ResultSet is returned.
	 */
	abstract public function selectModels($model, $filter = '', $join = '', $sort = '', $limit = '');
	
	/**
	 * Selects a single model from the database. 
	 * @param string $model  The name of the model.
	 * @param string $filter  The filter to apply to the model. This will be used as the WHERE clause.
	 * @param string $join  The statement to join additional tables.
	 * @param string $sort  How to order the results. This will be used as the ORDER BY clause.
	 * @param string $limit  Limit the result set.
	 * @return The Model object. If a result is not found, null is returned.
	 */
	abstract public function selectSingleModel($model, $filter = '', $join = '', $sort = '', $limit = '');
	
	/**
	 * Selects a single model from the database. 
	 * @param string $model  The name of the model.
	 * @param string $id  The ID of the model to get.
	 * @return The Model object. If no model with the $id is found, null is returned.
	 */
	abstract public function selectSingleModelByID($model, $id);
	
	/**
	 * Gets the current database as defined in the config.php file.
	 * @return The relevant database class.
	 */
	public static function current() {

		// Ensure the configuration is loaded.
		//if (!Config::isSystemSet('DB_TYPE')) {
			
			// Set the error message and returned.
			//exit("The configuration (".Config::get('CONFIG_PATH')."config.php) was not loaded. Please include this first!");
						
		//}
		
		// Set the currentDB to null
		$currentDB = new EV_MysqlDB();
		
		// Select the database type
		//switch(Config::get('DB_TYPE')) {
			
			// The mysql database type
			//case 'mysql':
				//$currentDB = new MysqlDB();
			
		//}
		
		// Return the current database.
		return $currentDB;
		
	}
	
}

?>